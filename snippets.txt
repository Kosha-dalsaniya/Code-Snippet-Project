Tag: #include
Code: #include <iostream>

Tag: Multithreading
Code: #include <iostream>
#include <thread>

Tag: RAII-smart pointers
Code: #include <memory>

Tag: Varaible declaration and initialisation
Code: int x = 10;
float pi = 3.14;
char letter = 'A';
Tag: User input 
Code: #include <iostream>
#include <string>

Tag: binary search
Code: #include <algorithm>
#include <vector>

Tag: const keyword
Code: const int x = 10;
Tag: volatile keyword
Code: volatile int var;
Tag: function overloading
Code: int add(int a, int b) {
    return a + b;
}

Tag: default arguements
Code: void print(int x, int y = 10) {
    std::cout << "x: " << x << ", y: " << y << std::endl;
}
Tag: function templates
Code: template<typename T>
T add(T a, T b) {
    return a + b;
}
Tag: class templates
Code: template<typename T>
class Pair {
public:
    T first, second;
};
Tag: standard library algorithm-max_element
Code: #include <algorithm>
#include <vector>

Tag: exception handling
Code: #include <iostream>

Tag: file input/output
Code: #include <fstream>

Tag: if-else
Code: int x = 5;
if (x > 0) {
    std::cout << "x is a positive integer." << std::endl;
} else {
    std::cout << "x is not a positive integer." << std::endl;
}
Tag: for loop
Code: for (int i = 0; i < 10; ++i) {
    std::cout << i << std::endl;
}
Tag: while loop
Code: int i = 0;
while (i < 10) {
    std::cout << i << std::endl;
    ++i;
}
Tag: Array declaration and initialisation
Code: int arr[4] = {2,4,6,8};
Tag: Function declaration
Code:  int multiply(int a, int b) {
    return a*b;
}
Tag: Function call
Code: int result = multiply(2, 5);
Tag: recursion
Code: int factorial(int n) {
    if (n == 0) return 1;
    return n * factorial(n - 1);
}
Tag: pionters
Code: int x = 10;
int* ptr = &x;
std::cout << *ptr << std::endl; // Output: 10
Tag: reference
Code: int x = 10;
int& ref = x;
ref = 20;
std::cout << x << std::endl; // Output: 20
Tag: class declaration
Code: class Sqaure {
public:
    int length;
};
Tag: Object creation
Code: Sqaure sq;
rect.length = 10;
Tag: class constructor
Code: class Rectangle {
public:
    int width;
    int height;
    
    Rectangle(int w, int h) : width(w), height(h) {}
};
Tag: class destructor
Code: class MyClass {
public:
    ~MyClass() {
        std::cout << "Destructor called" << std::endl;
    }
};
Tag: class inheritance
Code: class Square : public Rectangle {
public:
    Square(int side) : Rectangle(side, side) {}
};
Tag: virtual functions
Code: class Base {
public:
    virtual void show() {
        std::cout << "Base class" << std::endl;
    }
};

Tag: lambda functions
Code: #include <iostream>

Tag: mutex(locking mechanism)
Code: #include <iostream>
#include <thread>
#include <mutex>

Tag: operation overloading
Code: class Complex {
public:
    int real, imag;
    Complex operator+(const Complex& other) {
        Complex result;
        result.real = real + other.real;
        result.imag = imag + other.imag;
        return result;
    }
};
Tag: friend function
Code: class MyClass {
private:
    int x;
public:
    friend void friendFunction(MyClass obj);
};

Tag: preprocessor directives
Code: #define PI 3.14
Tag: conditional compilation
Code: #ifdef DEBUG
    // Debugging code
#endif
Tag: inline functions
Code: inline int add(int a, int b) {
    return a + b;
}
Tag: static keywords
Code: class MyClass {
public:
    static int cnt; // cnt=count
};

Tag: random number generation
Code: #include <iostream>
#include <random>

Tag: searching 
Code: #include <algorithm>
#include <vector>

Tag: sorting
Code: #include <algorithm>
#include <vector>

Tag: standard libary algorithm-reduce
Code: #include <numeric>
#include <vector>

Tag: standard library algorithm-accumulate
Code: #include <numeric>
#include <vector>

Tag: standard library algorithm-adjacent_find
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-binary search
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-cbrt
Code: #include <cmath>

Tag: standard library algorithm-clamp
Code: #include <algorithm>

Tag: standard library algorithm-copy
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-count
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-equal:
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-equal_range
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-fill
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-find if
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-find_end
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-find_first_of
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-from_chars
Code: #include <charconv>

Tag: standard library algorithm-gcd
Code: #include <numeric>

Tag: standard library algorithm-hypot
Code: #include <cmath>

Tag: standard library algorithm-is_permutaion
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-is_sorted
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-lcm
Code: #include <numeric>

Tag: standard library algorithm-lexicographical_compare
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-mid_point
Code: #include <numeric>

Tag: standard library algorithm-min_element
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-minmax
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-mismatch
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-nth_element
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-partition
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-partition_point
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-random_shuffle
Code: #include <algorithm>
#include <vector>
#include <random>

Tag: standard library algorithm-remove
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-remove_if
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-replace
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-replace_if
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-reverse
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-reverse_copy
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-rotate
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-sample
Code: #include <algorithm>
#include <iostream>
#include <vector>
#include <random>

Tag: standard library algorithm-search
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-search_n
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-shift_left
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-shift_right
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-shuffle
Code: #include <algorithm>
#include <vector>
#include <random>

Tag: standard library algorithm-shuffle_order
Code: #include <algorithm>
#include <vector>
#include <random>

Tag: standard library algorithm-sort
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-stable_partition
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-swap_ranges
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-to_chars
Code: #include <charconv>

Tag: standard library algorithm-transform
Code: #include <algorithm>
#include <vector>

Tag: standard library algorithm-unique
Code: #include <algorithm>
#include <vector>

Tag: stl map
Code: #include <map>

Tag: stl set
Code: #include <set>

Tag: stl vector
Code: #include <vector>

Tag: type casting
Code: double x = 3.14;
int y = static_cast<int>(x);
Tag: enumerations
Code: enum Color {RED, GREEN, BLUE};
Color c = RED;
Tag: namespaces
Code: namespace math {
    int multiply(int a, int b) {
        return a*b;
    }
}

